#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define TAM_FILA 5   // tamanho máximo da fila
#define TAM_PILHA 3  // tamanho máximo da pilha

// ---------------------------------
// Estrutura da Peça
// ---------------------------------
typedef struct {
    char nome; // tipo da peça: 'I', 'O', 'T', 'L'
    int id;    // identificador único
} Peca;

// ---------------------------------
// Estruturas de dados
// ---------------------------------
typedef struct {
    Peca elementos[TAM_FILA];
    int frente;
    int tras;
    int tamanho;
} Fila;

typedef struct {
    Peca elementos[TAM_PILHA];
    int topo;
} Pilha;

// ---------------------------------
// Funções de Fila
// ---------------------------------
void inicializarFila(Fila *f) {
    f->frente = 0;
    f->tras = -1;
    f->tamanho = 0;
}

int filaCheia(Fila *f) { return f->tamanho == TAM_FILA; }
int filaVazia(Fila *f) { return f->tamanho == 0; }

void enfileirar(Fila *f, Peca p) {
    if (filaCheia(f)) return;
    f->tras = (f->tras + 1) % TAM_FILA;
    f->elementos[f->tras] = p;
    f->tamanho++;
}

Peca desenfileirar(Fila *f) {
    Peca p = {'-', -1};
    if (filaVazia(f)) return p;
    p = f->elementos[f->frente];
    f->frente = (f->frente + 1) % TAM_FILA;
    f->tamanho--;
    return p;
}

Peca *acessarElementoFila(Fila *f, int pos) {
    if (pos < 0 || pos >= f->tamanho) return NULL;
    int idx = (f->frente + pos) % TAM_FILA;
    return &f->elementos[idx];
}

void exibirFila(Fila *f) {
    printf("Fila de peças\t");
    if (filaVazia(f)) {
        printf("(vazia)\n");
        return;
    }
    int i, idx = f->frente;
    for (i = 0; i < f->tamanho; i++) {
        Peca p = f->elementos[idx];
        printf("[%c %d] ", p.nome, p.id);
        idx = (idx + 1) % TAM_FILA;
    }
    printf("\n");
}

// ---------------------------------
// Funções de Pilha
// ---------------------------------
void inicializarPilha(Pilha *p) { p->topo = -1; }

int pilhaCheia(Pilha *p) { return p->topo == TAM_PILHA - 1; }
int pilhaVazia(Pilha *p) { return p->topo == -1; }

void empilhar(Pilha *p, Peca nova) {
    if (pilhaCheia(p)) return;
    p->topo++;
    p->elementos[p->topo] = nova;
}

Peca desempilhar(Pilha *p) {
    Peca removida = {'-', -1};
    if (pilhaVazia(p)) return removida;
    removida = p->elementos[p->topo];
    p->topo--;
    return removida;
}

Peca *acessarElementoPilha(Pilha *p, int pos) {
    if (pos < 0 || pos > p->topo) return NULL;
    return &p->elementos[p->topo - pos]; // 0 é topo
}

void exibirPilha(Pilha *p) {
    printf("Pilha de reserva\t(Topo -> base): ");
    if (pilhaVazia(p)) {
        printf("(vazia)\n");
        return;
    }
    for (int i = p->topo; i >= 0; i--) {
        printf("[%c %d] ", p->elementos[i].nome, p->elementos[i].id);
    }
    printf("\n");
}

// ---------------------------------
// Funções auxiliares
// ---------------------------------
Peca gerarPeca(int id) {
    char tipos[] = {'I', 'O', 'T', 'L'};
    Peca nova;
    nova.nome = tipos[rand() % 4];
    nova.id = id;
    return nova;
}

void exibirEstado(Fila *f, Pilha *p) {
    printf("\n-------------------------------------------\n");
    exibirFila(f);
    exibirPilha(p);
    printf("-------------------------------------------\n");
}

// ---------------------------------
// Funções novas (versão avançada)
// ---------------------------------

// Troca a peça da frente da fila com o topo da pilha
void trocarFrenteComTopo(Fila *fila, Pilha *pilha) {
    if (filaVazia(fila) || pilhaVazia(pilha)) {
        printf("\n⚠️  Não é possível trocar: fila ou pilha vazia.\n");
        return;
    }
    int idxFrente = fila->frente;
    Peca temp = fila->elementos[idxFrente];
    fila->elementos[idxFrente] = pilha->elementos[pilha->topo];
    pilha->elementos[pilha->topo] = temp;

    printf("\n🔄 Troca realizada entre a frente da fila e o topo da pilha.\n");
}

// Troca as três primeiras peças da fila com as três da pilha
void trocaMultipla(Fila *fila, Pilha *pilha) {
    if (fila->tamanho < 3 || pilha->topo < 2) {
        printf("\n⚠️  Não é possível realizar troca múltipla (precisa de pelo menos 3 peças em cada).\n");
        return;
    }

    for (int i = 0; i < 3; i++) {
        Peca *pf = acessarElementoFila(fila, i);
        Peca *pp = acessarElementoPilha(pilha, i);
        if (pf && pp) {
            Peca temp = *pf;
            *pf = *pp;
            *pp = temp;
        }
    }

    printf("\n🔁 Ação: troca realizada entre as 3 primeiras da fila e as 3 da pilha.\n");
}

// ---------------------------------
// Função principal (main)
// ---------------------------------
int main() {
    Fila fila;
    Pilha pilha;
    inicializarFila(&fila);
    inicializarPilha(&pilha);
    srand(time(NULL));

    int idAtual = 0;

    // Inicializa a fila com 5 peças
    for (int i = 0; i < TAM_FILA; i++) {
        enfileirar(&fila, gerarPeca(idAtual++));
    }

    int opcao;
    do {
        exibirEstado(&fila, &pilha);
        printf("\nOpções disponíveis:\n");
        printf("1 - Jogar peça da frente da fila\n");
        printf("2 - Enviar peça da fila para a pilha de reserva\n");
        printf("3 - Usar peça da pilha de reserva\n");
        printf("4 - Trocar peça da frente da fila com o topo da pilha\n");
        printf("5 - Trocar os 3 primeiros da fila com as 3 peças da pilha\n");
        printf("0 - Sair\n");
        printf("Opção escolhida: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1: {
                Peca jogada = desenfileirar(&fila);
                if (jogada.id != -1)
                    printf("\n🎮 Peça jogada: [%c %d]\n", jogada.nome, jogada.id);
                enfileirar(&fila, gerarPeca(idAtual++));
                break;
            }
            case 2: {
                if (pilhaCheia(&pilha)) {
                    printf("\n⚠️  Pilha cheia! Não é possível reservar.\n");
                    break;
                }
                Peca reservada = desenfileirar(&fila);
                if (reservada.id != -1) {
                    empilhar(&pilha, reservada);
                    printf("\n📦 Peça reservada: [%c %d]\n", reservada.nome, reservada.id);
                }
                enfileirar(&fila, gerarPeca(idAtual++));
                break;
            }
            case 3: {
                Peca usada = desempilhar(&pilha);
                if (usada.id != -1)
                    printf("\n🧩 Peça usada da reserva: [%c %d]\n", usada.nome, usada.id);
                enfileirar(&fila, gerarPeca(idAtual++));
                break;
            }
            case 4:
                trocarFrenteComTopo(&fila, &pilha);
                break;
            case 5:
                trocaMultipla(&fila, &pilha);
                break;
            case 0:
                printf("\n👋 Encerrando o jogo. Até mais!\n");
                break;
            default:
                printf("\n⚠️  Opção inválida! Tente novamente.\n");
        }

    } while (opcao != 0);

    return 0;
}


