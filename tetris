#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define TAM_FILA 5   // tamanho m√°ximo da fila de pe√ßas
#define TAM_PILHA 3  // tamanho m√°ximo da pilha de reserva

// -------------------------------
// Estruturas de dados
// -------------------------------

// Estrutura que representa uma pe√ßa de Tetris
typedef struct {
    char nome; // tipo da pe√ßa: 'I', 'O', 'T', 'L'
    int id;    // identificador √∫nico
} Peca;

// Estrutura da fila circular
typedef struct {
    Peca elementos[TAM_FILA];
    int frente;
    int tras;
    int tamanho;
} Fila;

// Estrutura da pilha
typedef struct {
    Peca elementos[TAM_PILHA];
    int topo;
} Pilha;

// -------------------------------
// Fun√ß√µes da Fila
// -------------------------------

void inicializarFila(Fila *f) {
    f->frente = 0;
    f->tras = -1;
    f->tamanho = 0;
}

int filaCheia(Fila *f) {
    return f->tamanho == TAM_FILA;
}

int filaVazia(Fila *f) {
    return f->tamanho == 0;
}

void enfileirar(Fila *f, Peca p) {
    if (filaCheia(f)) {
        printf("\n‚ö†Ô∏è  Fila cheia! N√£o √© poss√≠vel inserir nova pe√ßa.\n");
        return;
    }
    f->tras = (f->tras + 1) % TAM_FILA;
    f->elementos[f->tras] = p;
    f->tamanho++;
}

Peca desenfileirar(Fila *f) {
    Peca p = {'-', -1};
    if (filaVazia(f)) {
        printf("\n‚ö†Ô∏è  Fila vazia! Nenhuma pe√ßa dispon√≠vel.\n");
        return p;
    }
    p = f->elementos[f->frente];
    f->frente = (f->frente + 1) % TAM_FILA;
    f->tamanho--;
    return p;
}

void exibirFila(Fila *f) {
    printf("Fila de pe√ßas: ");
    if (filaVazia(f)) {
        printf("(vazia)\n");
        return;
    }
    int i, idx = f->frente;
    for (i = 0; i < f->tamanho; i++) {
        Peca p = f->elementos[idx];
        printf("[%c %d] ", p.nome, p.id);
        idx = (idx + 1) % TAM_FILA;
    }
    printf("\n");
}

// -------------------------------
// Fun√ß√µes da Pilha
// -------------------------------

void inicializarPilha(Pilha *p) {
    p->topo = -1;
}

int pilhaCheia(Pilha *p) {
    return p->topo == TAM_PILHA - 1;
}

int pilhaVazia(Pilha *p) {
    return p->topo == -1;
}

void empilhar(Pilha *p, Peca nova) {
    if (pilhaCheia(p)) {
        printf("\n‚ö†Ô∏è  Pilha cheia! N√£o √© poss√≠vel reservar mais pe√ßas.\n");
        return;
    }
    p->topo++;
    p->elementos[p->topo] = nova;
}

Peca desempilhar(Pilha *p) {
    Peca removida = {'-', -1};
    if (pilhaVazia(p)) {
        printf("\n‚ö†Ô∏è  Pilha vazia! Nenhuma pe√ßa reservada para usar.\n");
        return removida;
    }
    removida = p->elementos[p->topo];
    p->topo--;
    return removida;
}

void exibirPilha(Pilha *p) {
    printf("Pilha de reserva (Topo -> Base): ");
    if (pilhaVazia(p)) {
        printf("(vazia)\n");
        return;
    }
    for (int i = p->topo; i >= 0; i--) {
        printf("[%c %d] ", p->elementos[i].nome, p->elementos[i].id);
    }
    printf("\n");
}

// -------------------------------
// Fun√ß√µes auxiliares
// -------------------------------

// Gera uma nova pe√ßa com tipo aleat√≥rio e ID sequencial
Peca gerarPeca(int id) {
    char tipos[] = {'I', 'O', 'T', 'L'};
    Peca nova;
    nova.nome = tipos[rand() % 4];
    nova.id = id;
    return nova;
}

// Exibe o estado completo do jogo
void exibirEstado(Fila *fila, Pilha *pilha) {
    printf("\n--------------------------------------\n");
    exibirFila(fila);
    exibirPilha(pilha);
    printf("--------------------------------------\n");
}

// -------------------------------
// Fun√ß√£o principal (main)
// -------------------------------
int main() {
    Fila fila;
    Pilha pilha;
    inicializarFila(&fila);
    inicializarPilha(&pilha);
    srand(time(NULL));

    int idAtual = 0;
    // Inicializa a fila com 5 pe√ßas
    for (int i = 0; i < TAM_FILA; i++) {
        enfileirar(&fila, gerarPeca(idAtual++));
    }

    int opcao;
    do {
        exibirEstado(&fila, &pilha);
        printf("\nOp√ß√µes de a√ß√£o:\n");
        printf("1 - Jogar pe√ßa\n");
        printf("2 - Reservar pe√ßa\n");
        printf("3 - Usar pe√ßa reservada\n");
        printf("0 - Sair\n");
        printf("Escolha: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1: {
                // Jogar a pe√ßa (remove da fila)
                Peca jogada = desenfileirar(&fila);
                if (jogada.id != -1)
                    printf("\nüéÆ Pe√ßa jogada: [%c %d]\n", jogada.nome, jogada.id);
                break;
            }
            case 2: {
                // Reservar pe√ßa (move da fila para pilha)
                if (pilhaCheia(&pilha)) {
                    printf("\n‚ö†Ô∏è  Pilha cheia! N√£o √© poss√≠vel reservar.\n");
                    break;
                }
                Peca reservada = desenfileirar(&fila);
                if (reservada.id != -1) {
                    empilhar(&pilha, reservada);
                    printf("\nüì¶ Pe√ßa reservada: [%c %d]\n", reservada.nome, reservada.id);
                }
                break;
            }
            case 3: {
                // Usar pe√ßa reservada (remove do topo da pilha)
                Peca usada = desempilhar(&pilha);
                if (usada.id != -1)
                    printf("\nüß© Pe√ßa usada da reserva: [%c %d]\n", usada.nome, usada.id);
                break;
            }
            case 0:
                printf("\nüëã Encerrando o jogo. At√© mais!\n");
                break;
            default:
                printf("\n‚ö†Ô∏è  Op√ß√£o inv√°lida! Tente novamente.\n");
        }

        // Ap√≥s qualquer a√ß√£o (1, 2 ou 3), gerar uma nova pe√ßa e enfileirar
        if (opcao >= 1 && opcao <= 3) {
            enfileirar(&fila, gerarPeca(idAtual++));
        }

    } while (opcao != 0);

    return 0;
}

