#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define TAM_FILA 5 // tamanho m√°ximo da fila de pe√ßas

// Estrutura que representa uma pe√ßa de Tetris
typedef struct {
    char nome; // tipo da pe√ßa: 'I', 'O', 'T', 'L'
    int id;    // identificador √∫nico da pe√ßa
} Peca;

// Estrutura da fila circular
typedef struct {
    Peca elementos[TAM_FILA];
    int frente;
    int tras;
    int tamanho;
} Fila;

// -------------------------------
// Fun√ß√µes auxiliares da fila
// -------------------------------

// Inicializa a fila vazia
void inicializarFila(Fila *f) {
    f->frente = 0;
    f->tras = -1;
    f->tamanho = 0;
}

// Verifica se a fila est√° cheia
int filaCheia(Fila *f) {
    return f->tamanho == TAM_FILA;
}

// Verifica se a fila est√° vazia
int filaVazia(Fila *f) {
    return f->tamanho == 0;
}

// Insere uma nova pe√ßa ao final da fila (enqueue)
void enfileirar(Fila *f, Peca p) {
    if (filaCheia(f)) {
        printf("\n‚ö†Ô∏è  Fila cheia! N√£o √© poss√≠vel inserir nova pe√ßa.\n");
        return;
    }
    f->tras = (f->tras + 1) % TAM_FILA;
    f->elementos[f->tras] = p;
    f->tamanho++;
}

// Remove a pe√ßa da frente da fila (dequeue)
Peca desenfileirar(Fila *f) {
    Peca p = {'-', -1};
    if (filaVazia(f)) {
        printf("\n‚ö†Ô∏è  Fila vazia! Nenhuma pe√ßa para jogar.\n");
        return p;
    }
    p = f->elementos[f->frente];
    f->frente = (f->frente + 1) % TAM_FILA;
    f->tamanho--;
    return p;
}

// Exibe o estado atual da fila
void exibirFila(Fila *f) {
    printf("\nFila de pe√ßas:\n");
    if (filaVazia(f)) {
        printf("(vazia)\n");
        return;
    }
    int i;
    int indice = f->frente;
    for (i = 0; i < f->tamanho; i++) {
        Peca p = f->elementos[indice];
        printf("[%c %d] ", p.nome, p.id);
        indice = (indice + 1) % TAM_FILA;
    }
    printf("\n");
}

// -------------------------------
// Fun√ß√µes para gera√ß√£o de pe√ßas
// -------------------------------

// Gera uma nova pe√ßa com tipo aleat√≥rio e ID sequencial
Peca gerarPeca(int id) {
    char tipos[] = {'I', 'O', 'T', 'L'};
    Peca nova;
    nova.nome = tipos[rand() % 4]; // seleciona aleatoriamente uma pe√ßa
    nova.id = id;
    return nova;
}

// -------------------------------
// Fun√ß√£o principal (main)
// -------------------------------
int main() {
    Fila fila;
    inicializarFila(&fila);
    srand(time(NULL)); // inicializa gerador de n√∫meros aleat√≥rios

    int idAtual = 0;

    // Inicializa a fila com 5 pe√ßas
    for (int i = 0; i < TAM_FILA; i++) {
        enfileirar(&fila, gerarPeca(idAtual++));
    }

    int opcao;
    do {
        exibirFila(&fila);
        printf("\nOp√ß√µes de a√ß√£o:\n");
        printf("1 - Jogar pe√ßa (dequeue)\n");
        printf("2 - Inserir nova pe√ßa (enqueue)\n");
        printf("0 - Sair\n");
        printf("Escolha: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1: {
                Peca jogada = desenfileirar(&fila);
                if (jogada.id != -1)
                    printf("\nüéÆ Pe√ßa jogada: [%c %d]\n", jogada.nome, jogada.id);
                break;
            }
            case 2: {
                Peca nova = gerarPeca(idAtual++);
                enfileirar(&fila, nova);
                break;
            }
            case 0:
                printf("\nüëã Encerrando o jogo. At√© mais!\n");
                break;
            default:
                printf("\n‚ö†Ô∏è  Op√ß√£o inv√°lida! Tente novamente.\n");
        }

    } while (opcao != 0);

    return 0;
}
